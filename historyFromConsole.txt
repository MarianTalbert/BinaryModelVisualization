install.packages("Rccp")
install.packages("Rcpp")
library(devtools)
library(Rccp)
library(Rcpp)
library(rInside)
install.packages("rInside")
install.packages("rzmq")
install.packages("rzmq")
install.pacakges("rzmq")
library(rzmq)
install.packages("svSocket")
library(svSocket)
startSocketServer()
## Connect with the R socket server
con <- socketConnection(host = "localhost", port = 50002, blocking = FALSE)
sendSocketClients("Test")
sendSocketClients(Test)
L <- 10:20
L
evalServer(con, L)
writeLines("Test",con)
writeLines("Test",con)
writeLines("{'action':'clear_screens'}",con)
writeLines('{"action":"clear_screens"}',con)
writeLines('{"action":"clear_screens"}',con)
library(caret)
install.packages("caret")
library(caret)
install.packages("pbkrtest")
install.packages("installr")
updateR()
library(installr)
updateR()
install.package("caret")
install.packages("caret")
library(caret)
data(iris)
TrainData <- iris[,1:4]
TrainClasses <- iris[,5]
knnFit <- train(TrainData, TrainClasses, "knn")
knnImp <- varImp(knnFit)
dotPlot(knnImp)
install.package("e1071")
install.packages("e1071")
library(e1071)
data(iris)
TrainData <- iris[,1:4]
TrainClasses <- iris[,5]
knnFit <- train(TrainData, TrainClasses, "knn")
knnImp <- varImp(knnFit)
dotPlot(knnImp)
getModelInfo()
data(iris)
TrainData <- iris[,1:4]
TrainClasses <- iris[,5]
knnFit1 <- train(TrainData, TrainClasses,
method = "knn",
preProcess = c("center", "scale"),
tuneLength = 10,
trControl = trainControl(method = "cv"))
knnFit2 <- train(TrainData, TrainClasses,
method = "knn",
preProcess = c("center", "scale"),
tuneLength = 10,
trControl = trainControl(method = "boot"))
predict(knnFit1)
?predict
setwd("C:\\GoogleDrive\\Interactive\\Rcode\\Shiny\\MyCode")
ShinyCode<-file.path(getwd(),"ResponseCurves\\External")
sourceList<-list.files(ShinyCode,full.names=TRUE)
unlist(lapply(as.list(sourceList),source))
ChkLibs(list("rgeos","maptools","randomForest","mgcv","dismo","shiny","earth","PresenceAbsence",
"wesanderson","ggplot2","raster","grid","gridExtra","splines","RColorBrewer","plotly","viridis"))
#=====================================================
# This is almost directly from the dismo vignette
files <- list.files(path=paste(system.file(package="dismo"),
'/ex', sep=''), pattern='grd', full.names=TRUE)
files<-files[c(1,5,2,7)]
files<-files[-c(9)]
layerStk <- stack(files)
plot(layerStk)
data(wrld_simpl)
file <- paste(system.file(package="dismo"), "/ex/bradypus.csv", sep="")
bradypus <- read.table(file, header=TRUE, sep=",")
# we do not need the first column
bradypus <- bradypus[,-1]
#And now plot:
# first layer of the RasterStack
plot(layerStk, 1)
# note the "add=TRUE" argument with plot
plot(wrld_simpl, add=TRUE)
# with the points function, "add" is implicit
points(bradypus, col="blue")
presvals <- extract(layerStk, bradypus)
# setting random seed to always create the same
# random set of points for this example
set.seed(0)
#setting up an extent around the presence points
PresExt <- extent(-104.7,-36,-26,16)
backgr <- randomPoints(layerStk,ext=PresExt, 500)
colnames(backgr)<-c("lon","lat")
absvals <- extract(layerStk, backgr)
pb <- c(rep(1, nrow(presvals)), rep(0, nrow(absvals)))
sdmdata <- data.frame(rbind(bradypus,backgr),cbind(pb, rbind(presvals, absvals)))
head(sdmdata)
correlationViewer(sdmdata,layerStk)
input$plot_brush
str(input$plot_brush)
source('C:/GoogleDrive/Interactive/Rcode/Shiny/MyCode/ResponseCurves/external/correlationViewer.r')
correlationViewer(sdmdata,layerStk)
source('C:/GoogleDrive/Interactive/Rcode/Shiny/MyCode/ResponseCurves/external/correlationViewer.r')
correlationViewer(sdmdata,layerStk)
source('C:/GoogleDrive/Interactive/Rcode/Shiny/MyCode/ResponseCurves/external/correlationViewer.r')
source('C:/GoogleDrive/Interactive/Rcode/Shiny/MyCode/ResponseCurves/external/ggpairs.R')
correlationViewer(sdmdata,layerStk)
source('C:/GoogleDrive/Interactive/Rcode/Shiny/MyCode/ResponseCurves/external/ggpairs.R')
correlationViewer(sdmdata,layerStk)
brushLoc
brushLoc
brushLoc
?brushOpts
brushLoc
brushLoc
source('C:/GoogleDrive/Interactive/Rcode/Shiny/MyCode/ResponseCurves/external/ggpairs.R')
correlationViewer(sdmdata,layerStk)
shinyApp(
ui = basicPage(
fluidRow(
column(width = 4,
plotOutput("plot", height=300,
click = "plot_click",  # Equiv, to click=clickOpts(id="plot_click")
hover = hoverOpts(id = "plot_hover", delayType = "throttle"),
brush = brushOpts(id = "plot_brush")
),
h4("Clicked points"),
tableOutput("plot_clickedpoints"),
h4("Brushed points"),
tableOutput("plot_brushedpoints")
),
column(width = 4,
verbatimTextOutput("plot_clickinfo"),
verbatimTextOutput("plot_hoverinfo")
),
column(width = 4,
wellPanel(actionButton("newplot", "New plot")),
verbatimTextOutput("plot_brushinfo")
)
)
),
server = function(input, output, session) {
data <- reactive({
input$newplot
# Add a little noise to the cars data so the points move
cars + rnorm(nrow(cars))
})
output$plot <- renderPlot({
d <- data()
plot(d$speed, d$dist)
})
output$plot_clickinfo <- renderPrint({
cat("Click:\n")
str(input$plot_click)
})
output$plot_hoverinfo <- renderPrint({
cat("Hover (throttled):\n")
str(input$plot_hover)
})
output$plot_brushinfo <- renderPrint({
cat("Brush (debounced):\n")
str(input$plot_brush)
})
output$plot_clickedpoints <- renderTable({
# For base graphics, we need to specify columns, though for ggplot2,
# it's usually not necessary.
res <- nearPoints(data(), input$plot_click, "speed", "dist")
if (nrow(res) == 0)
return()
res
})
output$plot_brushedpoints <- renderTable({
res <- brushedPoints(data(), input$plot_brush, "speed", "dist")
if (nrow(res) == 0)
return()
res
})
}
)
source('C:/GoogleDrive/Interactive/Rcode/Shiny/MyCode/ResponseCurves/external/ggpairs.R')
correlationViewer(sdmdata,layerStk)
source('C:/GoogleDrive/Interactive/Rcode/Shiny/MyCode/ResponseCurves/external/ggpairs.R')
correlationViewer(sdmdata,layerStk)
source('C:/GoogleDrive/Interactive/Rcode/Shiny/MyCode/ResponseCurves/external/ggpairs.R')
source('C:/GoogleDrive/Interactive/Rcode/Shiny/MyCode/ResponseCurves/external/correlationViewer.r')
correlationViewer(sdmdata,layerStk)
brushLoc
brushLoc
str(brushLoc)
str(brushLoc$mapping)
brushLoc$mapping
?grid.layout
?viewport
?gpar
a <- qplot(a, b, data = data.frame(a=rnorm(20), b=rnorm(20)),
geom = "point") +
opts(axis.text.x = theme_blank(), plot.background = theme_blank()) +
labs(x="")
b <- qplot(a, b, data = data.frame(a=rnorm(20), b=rnorm(20)),
geom = "point") + opts(plot.background = theme_blank())
vp1 <- viewport(width = 0.54, height = 0.54, x = 0.27, y = 0.27)
vp2 <- viewport(width = 0.54, height = 0.54, x = 0.27, y = 0.75)
vp3 <- viewport(width = 0.54, height = 0.54, x = 0.76, y = 0.26)
vp4 <- viewport(width = 0.54, height = 0.54, x = 0.76, y = 0.75)
grid.newpage()
pushViewport(viewport(layout = grid.layout(2,2)))
print(b, vp = vp1)
print(a, vp = vp2)
print(b, vp = vp3)
print(a, vp = vp4)
a <- qplot(a, b, data = data.frame(a=rnorm(20), b=rnorm(20)),
geom = "point") +
opts(axis.text.x = theme_blank(), plot.background = theme_blank()) +
labs(x="")
a <- qplot(a, b, data = data.frame(a=rnorm(20), b=rnorm(20)),
geom = "point")
b <- qplot(a, b, data = data.frame(a=rnorm(20), b=rnorm(20)),
geom = "point")
vp1 <- viewport(width = 0.54, height = 0.54, x = 0.27, y = 0.27)
vp2 <- viewport(width = 0.54, height = 0.54, x = 0.27, y = 0.75)
vp3 <- viewport(width = 0.54, height = 0.54, x = 0.76, y = 0.26)
vp4 <- viewport(width = 0.54, height = 0.54, x = 0.76, y = 0.75)
grid.newpage()
pushViewport(viewport(layout = grid.layout(2,2)))
print(b, vp = vp1)
print(a, vp = vp2)
print(b, vp = vp3)
print(a, vp = vp4)
?viewport
grid.show.layout(grid.layout(4,2,
heights=unit(rep(1, 4),
c("lines", "lines", "lines", "null")),
widths=unit(c(1, 1), "inches")))
?grid.layout
source('C:/GoogleDrive/Interactive/Rcode/Shiny/MyCode/ResponseCurves/external/ggpairs.R')
correlationViewer(sdmdata,layerStk)
source('C:/GoogleDrive/Interactive/Rcode/Shiny/MyCode/ResponseCurves/external/ggpairs.R')
source('C:/GoogleDrive/Interactive/Rcode/Shiny/MyCode/ResponseCurves/external/exploreCurves.r')
correlationViewer(sdmdata,layerStk)
brushLoc
brushLoc
brushLoc
brushLoc
ncol(dat)-1
(ncol(dat)-1+colOffset)
colOffset<-ifelse(showResp,1,0)
(ncol(dat)-1+colOffset)
str(brushLoc)
1/4
source('C:/GoogleDrive/Interactive/Rcode/Shiny/MyCode/ResponseCurves/external/ggpairs.R')
source('C:/GoogleDrive/Interactive/Rcode/Shiny/MyCode/ResponseCurves/external/correlationViewer.r')
correlationViewer(sdmdata,layerStk)
.526-.499
.797-.77
.247-.227
.229-.0119
.499-.0141
(.499-.0141-.027)/2
1.02-.797
.223*4
.224*4
.9/4
1689431-154
correlationViewer(sdmdata,layerStk)
.1/3
.1/4
str(bradypus)
View(sdmdata)
library(caret)
library(MASS)
library(mlbench)
library(rpart)
TrainData <- sdmdata[,4:7]
TrainClasses <- factor(sdmdata[,3])
createFolds(factor(sdmdata[,3]),
k=5)
set.seed(1)
inTrain<-createDataPartition()
knnFit1 <- train(TrainData, TrainClasses,
method = "knn",
preProcess = c("center", "scale"),
tuneLength = 10,
trControl = trainControl(method = "cv"))
knnFit2 <- train(TrainData, TrainClasses,
method = "knn",
preProcess = c("center", "scale"),
tuneLength = 10,
trControl = trainControl(method = "boot"))
nnetFit <- train(TrainData, TrainClasses,
method = "nnet",
preProcess = "range",
tuneLength = 2,
trace = FALSE,
maxit = 100)
glmFit <- train(TrainData, TrainClasses,
method = "glm")
earthFit <- train(TrainData, TrainClasses,
method = "bagEarthGCV")
fitLst2<-list(GLM_Model=GLM_Model,MARS_Model=MARS_Model,glmFit=glmFit,earthFit=earthFit,
nneFit=nnetFit,knnFit=knnFit1)
GLM_Model = glm(pb ~ bio1 + bio5 + bio12+ bio7, data=sdmdata,family=binomial)
fitLst2<-list(GLM_Model=GLM_Model,MARS_Model=MARS_Model,glmFit=glmFit,earthFit=earthFit,
nneFit=nnetFit,knnFit=knnFit1)
MARS_Model = earth(pb~ bio1 + bio5 + bio12 + bio7, data=sdmdata,glm=list(family=binomial))
fitLst2<-list(GLM_Model=GLM_Model,MARS_Model=MARS_Model,glmFit=glmFit,earthFit=earthFit,
nneFit=nnetFit,knnFit=knnFit1)
exploreCurves(fitLst2,inputLayers=layerStk,data=sdmdata,threshold=2,boundary=wrld_simpl)
install.packages("shiny-rgl")
install.packages("rgl")
setwd("C:\\GoogleDrive\\Python\\DevWorkspace\\userpackages\\sahm\\pySAHM\\Resources\\R_Modules")
ScriptPath="C:\\GoogleDrive\\Python\\DevWorkspace\\userpackages\\sahm\\pySAHM\\Resources\\R_Modules"
source("LoadRequiredCode.r")
source("MARS.helper.fcts.r")
source("GLM.helper.fcts.r")
source("BRT.helper.fcts.r")
source("RF.helper.fcts.r")
source("MAXENT.helper.fcts.r")
setwd("C:\\GoogleDrive\\Interactive\\Rcode\\Shiny\\MyCode")
sourceList<-list("ResponseCurves\\external\\ChkLibs.r","ResponseCurves\\external\\Colors.r","ResponseCurves\\external\\response.curves.r")
unlist(lapply(sourceList,source))
ChkLibs(list("gbm","randomForest","maptools","rgdal","shiny","leaflet","maptools","rgdal","raster","ncdf4","fields","maps",
"ggplot2","zoo","XML","RColorBrewer","chron","wesanderson","rgl"))
output.dir="C:\\temp\\SAHM_workspace"
rc="responseBinary"
wsLst<-list()
wsLst[[1]]<-"C:\\temp\\SAHM_workspace\\ForResponseCurveTool\\brewersSparrow\\brt_1\\modelWorkspace"
wsLst[[2]]<-"C:\\temp\\SAHM_workspace\\ForResponseCurveTool\\brewersSparrow\\glm_1\\modelWorkspace"
wsLst[[3]]<-"C:\\temp\\SAHM_workspace\\ForResponseCurveTool\\brewersSparrow\\mars_1\\modelWorkspace"
wsLst[[4]]<-"C:\\temp\\SAHM_workspace\\ForResponseCurveTool\\brewersSparrow\\rf_1\\modelWorkspace"
fitLst<-list()
modelLst<-list()
mapLst<-vector()
rastLst<-vector()
for(w in 1:length(wsLst)){
load(wsLst[[w]])
modelLst[[w]]<-out$input$script.name
rastLst<-out$dat$tif.ind
if(w>1 & any(rastLst!=out$dat$tif.ind)) stop("Rasters Don't match for all workspaces")
fitLst[[w]]<-out
rm(out)
mapLst[[w]]<-file.path(dirname(wsLst[[w]]),paste(modelLst[[w]],"prob_map.tif",sep="_"))
}
mapStk<<-stack(mapLst)
stk<-stack(rastLst)
Cols<<-c(wes_palette("Darjeeling"),wes_palette("Moonrise3"))
max_plots<-5
nModels<<-4
Variables<<-unique(unlist(lapply(fitLst,FUN=function(fit){fit$mods$vnames})))
dat<-fitLst[[1]]$dat$ma$train$dat[,-1]
resp<-fitLst[[1]]$dat$ma$train$dat[,1]
d=data.frame(Name=names(dat),min=apply(dat,2,min,na.rm=TRUE),
max=apply(dat,2,max,na.rm=TRUE),mean=apply(dat,2,mean,na.rm=TRUE))
dataLst<-split(d,f=seq(1:nrow(d)))
#=========================================
#    This is where the ma
runApp("ResponseCurves")
?webGLOutput
install.packages("shinyRGL")
library(shinyRGL)
runApp("ResponseCurves")
?webGLOutput
runApp("ResponseCurves")
library(shinyRGL)
runApp("ResponseCurves")
setwd("C:\\GoogleDrive\\Interactive\\Rcode\\Shiny\\MyCode")
ShinyCode<-file.path(getwd(),"ResponseCurves\\External")
sourceList<-list.files(ShinyCode,full.names=TRUE)
unlist(lapply(as.list(sourceList),source))
ChkLibs(list("rgeos","maptools","randomForest","mgcv","dismo","shiny","earth","PresenceAbsence",
"wesanderson","ggplot2","raster","grid","gridExtra","splines","RColorBrewer","plotly","viridis"))
#=====================================================
# This is almost directly from the dismo vignette
files <- list.files(path=paste(system.file(package="dismo"),
'/ex', sep=''), pattern='grd', full.names=TRUE)
files<-files[c(1,5,2,7)]
files<-files[-c(9)]
layerStk <- stack(files)
plot(layerStk)
data(wrld_simpl)
file <- paste(system.file(package="dismo"), "/ex/bradypus.csv", sep="")
bradypus <- read.table(file, header=TRUE, sep=",")
# we do not need the first column
bradypus <- bradypus[,-1]
#And now plot:
# first layer of the RasterStack
plot(layerStk, 1)
# note the "add=TRUE" argument with plot
plot(wrld_simpl, add=TRUE)
# with the points function, "add" is implicit
points(bradypus, col="blue")
presvals <- extract(layerStk, bradypus)
# setting random seed to always create the same
# random set of points for this example
set.seed(0)
#setting up an extent around the presence points
PresExt <- extent(-104.7,-36,-26,16)
backgr <- randomPoints(layerStk,ext=PresExt, 500)
colnames(backgr)<-c("lon","lat")
absvals <- extract(layerStk, backgr)
pb <- c(rep(1, nrow(presvals)), rep(0, nrow(absvals)))
sdmdata <- data.frame(rbind(bradypus,backgr),cbind(pb, rbind(presvals, absvals)))
head(sdmdata)
savehistory("C:/GoogleDrive/Interactive/Rcode/Shiny/MyCode/historyFromConsole.txt")
